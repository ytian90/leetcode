package leetcode.dfs_bfs;

import java.util.Arrays;

/**
 * 924. Minimize Malware Spread
 */
public class MinimizeMalwareSpread {
    public static int minMalwareSpread(int[][] graph, int[] initial) {
        int deleteNode = -1;
        int maxInfected = -1;
        boolean[] visited = new boolean[graph.length];
        Arrays.sort(initial);
        for (int i = 0; i < initial.length; i++) {
            if (visited[initial[i]]) continue;
            int count = dfs(graph, initial[i], visited);
            if (count > maxInfected) {
                deleteNode = initial[i];
                maxInfected = count;
            }
        }
        return deleteNode;
    }

    private static int dfs(int[][] graph, int node, boolean[] visited) {
        int count = 1;
        visited[node] = true;
        for (int i = 0; i < graph.length; i++) {
            if (visited[i]) continue;
            if (graph[node][i] == 1) {
                count += dfs(graph, i, visited);
            }
        }
        return count;
    }

    public static void main(String[] args) {
        System.out.println(minMalwareSpread(new int[][]{
                {1, 1, 0},
                {1, 1, 0},
                {0, 0, 1}
        }, new int[]{0, 1}));

        System.out.println(minMalwareSpread(new int[][]{
                {1, 0, 0},
                {0, 1, 0},
                {0, 0, 1}
        }, new int[]{0, 2}));

        System.out.println(minMalwareSpread(new int[][]{
                {1, 1, 1},
                {1, 1, 1},
                {1, 1, 1}
        }, new int[]{1, 2}));
    }
}
