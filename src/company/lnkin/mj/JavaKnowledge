                Process                             Thread
Basic           An execution program                A small part of process
Address Space   Separate space                      All threads of a process share the same address space
Multi-tasking   Process-based multitasking allow    Thread-based multitasking allows a single program
                a computer to run two or more       to run two or more threads concurrently
                programs concurrently
Communication   expensive and limited               less expensive
Switch          switch is expensive                 context switch is less expensive
Components      A process has its own address       A thread has its own register, state, stack,
                space, global variables, signal     and program counter
                handlers, open files, accounting
                info

Java virtual memory aka JVM.
JVM acts as an Interpreter, which is used to interpret your java program .class file to byte code that
can be understood by machine or computer.
Mainly JVM is used for Memory allocation, Garbage Collection and to throw runtime exception.
2 main parts:
1. Heap Memory
2. Stack Memory

The java program which we write with public static void main where Main method acts as a Thread inside JVM.

Class Loader: it helps us to load our own class into JVM, the main() method from our java class will create
a Thread on JVM that has its own memory:
Stack Memory: It is a Last In First Out Memory Model which stores all the primitive value types and class
types as a value at each memory location of stack memory frames.
Heap Memory: is allocated at the runtime to the class instances and Arrays in java program, contains
Permanent Generation, Younger Generation and Older Generation.
Program counter(PC): it is a pointer to the memory address and it gets incremented for each step
execution of the program to point to the next memory address in stack memory.
Native Library and Native method Interface are used for Native application execution.

Java Heap Space:
Java Heap Space is used by java runtime to allocate memory to Objects and JRE classes. Whenever we create
an object, it's always created in the Heap space.
Garbage Collection runs on the heap memory to free the memory used by objects that don't have any reference.
Any object created in the heap space has global access and can be referenced from anyway of the application.

Java Stack Memory:
Java Stack memory is used for the execution of a thread. They contain method-specific values that are
short-lived and references to other objects in the heap that is getting referred from the method.
Stack memory is always referenced in LIFO(Last-In-First-Out) order. Whenever a method is invoked,
a new block is created in the stack method for the method to hold local primitive values and reference
to other objects in the method.
As soon as the method ends, the block becomes unused and becomes available for the next method.
Stack memory size is very less compared to Heap memory.

package com.journaldev.test;

public class Memory {
	public static void main(String[] args) { // Line 1
		int i=1; // Line 2
		Object obj = new Object(); // Line 3
		Memory mem = new Memory(); // Line 4
		mem.foo(obj); // Line 5
	} // Line 9

	private void foo(Object param) { // Line 6
		String str = param.toString(); //// Line 7
		System.out.println(str);
	} // Line 8
}

1. As soon as we run the program, it loads all the Runtime classes into the Heap space. When the main()
method is found in line 1, Java Runtime creates stack memory to be used by main() method thread.
2. We are creating primitive local variable at line 2, so it's created and stored in the stack memory
of main() method.
3. Since we are creating an Object in line 3, it's created in heap memory and stack memory contains
the reference for it. A similar process occurs when line 4.
4. Now when we call the foo() method in the line 5, a block in the top of the stack is created to be
used by the foo() method. Since Java is pass-by-value, a new reference to Object is created in the
foo() stack block in line 6.
5. A string is created in line 7, it goes in the String Pool in heap space and a reference is created in
foo() in stack space for it.
6. foo() method is terminated in line 8, at this time memory block allocated for foo() in stack becomes
free.
7. In line 9, main() method terminates and the stack memory created for main() method is destroyed.
The program ends at this line, Java Runtime frees all the memory and ends the execution of the program.

Differences between Java Heap Space and Stack Memory
1. Heap memory is used by all the parts of the application whereas stack memory is used only by one
thread of execution.
2. Whenever an object is created, it's always stored in the Heap space and stack memory contains the
reference to it. Stack memory only contains the local primitive variables and reference variables to
object in heap space.
3. Objects stored in heap are globally accessible whereas stack memory can't be accessed by other threads.
4. Memory management in stack is done in LIFO manner whereas it's more complex in Heap memory because
it's used globally. Heap memory is divided into Young-Generation, Old-Generation, Permanent Generation etc.
5. Stack memory is short-lived whereas heap memory lives from the start until the end of the application
execution.
6. We can use -Xms and -Xmx JVM option to define the startup size and maximum size of heap memory.
We can use -Xss to define the stack memory size;
7. When stack memory is full, Java runtime throws java.lang.StackOverFlowError whereas if heap memory
is full, it throws java.lang.OutOfMemoryError: Java Heap Space error.
8. Stack memory size is very less when compared to Heap memory. Because of simplicity in memory allocation
(LIFO), stack memory is very fast when compared to heap memory.

Final is a keyword, it is used to apply restrictions on class, method and variable.
Final class can't be inherited, final method can't be overridden and final variable value can't be changed.

Finally is a block, it is used to place important code, it will be executed whether exception is handled or not.

Finalize is a method, is used to perform clean up processing just before object is garbage collected.

Mutex vs Semaphore:
1. Semaphore can be counted, while mutex can only count to 1.
Semaphore - Restrict the number of threads that can access a resource. Example, limit max 10 connections
to access a file simultaneously.
Mutex - Only one thread to access a resource at once. Example, when a client is accessing a file, no one
else should have access the same file at the same time.
2. Semaphores have no notion of ownership, any thread can release a semaphore.
Whereas a mutex does have the concept of ownership, you can only release a mutex you have acquired.

Abstract Class                              Interface
have abstract and non-abstract methods      only abstract methods, since Java 8, have default and static methods
doesn't support multiple inheritance        support multiple inheritances
can have final, non-final, static and       only static and final variables
non-static variables
can provide the implementation of           can't provide the implementation of abstract class
interface
abstract keyword is used to declare         interface keyword is used to declare interface
abstract class
can extend another Java class and           can only extend another Java interface only
implement multiple Java interfaces
can be extended using "extends"             can be implemented using keyword "implements"
can have class members like private,        members of interface are public by default
protected etc.
Example:                                    Example:
public abstract class Shape {               public interface Drawable {
    public abstract void draw();                void draw();
}                                           }
